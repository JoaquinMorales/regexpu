#!/usr/bin/env node
'use strict';

const fs = require('fs');
const jsesc = require('jsesc');
const regexpu = require('../regexpu.js');
const strings = process.argv.splice(2);
const stdin = process.stdin;
let isFlags = false;
const options = {};
const log = console.log;

// Workaround for Node.js v6. https://twitter.com/izs/status/732317861067153408
[process.stdout, process.stderr].forEach((s) => {
	s && s._handle && s._handle.setBlocking && s._handle.setBlocking(true);
});

const showHelp = function() {
	log(
		'regexpu v%s - https://mths.be/regexpu',
		regexpu.version
	);
	log([
		'\nUsage:\n',
		'\tregexpu [snippet ...]',
		'\tregexpu [-p | --unicode-property-escape] [-u | --use-unicode-flag] [snippet ...]',
		'\tregexpu [-f | --flags] [gimsuy] [-s | --dotall]',
		'\tregexpu [-v | --version]',
		'\tregexpu [-h | --help]',
		'\nExamples:\n',
		'\tregexpu \'const x = /foo.bar/u;\'',
		'\tregexpu -p -u \'const x = /\\p{Lu}/u;\'',
		'\techo \'const x = /foo.bar/u;\' | regexpu'
	].join('\n'));
};

const main = function() {

	if (!strings.length) {
		showHelp();
		return process.exit(1);
	}

	for (const string of strings) {

		let snippet;

		if (/^(?:-h|--help|undefined)$/.test(string)) {
			showHelp();
			return process.exit(1);
		}

		if (/^(?:-v|--version)$/.test(string)) {
			log('v%s', regexpu.version);
			return process.exit(1);
		}

		if (/^(?:-f|--flags)$/.test(string)) {
			isFlags = true;
			continue;
		}

		if (/^(?:-s|--dotall)$/.test(string)) {
			options.dotAllFlag = true;
			continue;
		}

		if (/^(?:-p|--unicode-property-escape)$/.test(string)) {
			options.unicodePropertyEscape = true;
			continue;
		}

		if (/^(?:-u|--use-unicode-flag)$/.test(string)) {
			options.useUnicodeFlag = true;
			continue;
		}

		if (isFlags) {
			flags = string;
			isFlags = false;
			continue;
		}

		snippet = string;
		try {
			const result = regexpu.transpileCode(snippet, options);
			log(result);
		} catch (exception) {
			log(exception.message + '\n');
			log('Error: failed to transpile. Make sure the JavaScript code is valid.');
			log('If you think this is a bug in regexpu, please report it:');
			log('https://github.com/mathiasbynens/regexpu/issues/new');
			log('\nStack trace using regexpu@%s:\n', regexpu.version);
			log(exception.stack);
			return process.exit(1);
		}

	}

	// Return with exit status 0 outside of the `forEach` loop, in case
	// multiple snippets or files were passed in.
	return process.exit(0);
};

if (stdin.isTTY) {
	// handle shell arguments
	main();
} else {
	let timeout;
	// Either the script is called from within a non-TTY context, or `stdin`
	// content is being piped in.
	if (!process.stdout.isTTY) {
		// The script was called from a non-TTY context. This is a rather uncommon
		// use case we don’t actively support. However, we don’t want the script
		// to wait forever in such cases, so…
		timeout = setTimeout(function() {
			// …if no piped data arrived after a whole minute, handle shell
			// arguments instead.
			main();
		}, 60000);
	}
	let data = '';
	stdin.on('data', function(chunk) {
		clearTimeout(timeout);
		data += chunk;
	});
	stdin.on('end', function() {
		strings.push(data.trim());
		main();
	});
	stdin.resume();
}
